http://blog.csdn.net/u011064099/article/details/53318251

 一步步手动实现热修复(一)-dex文件的生成与加载
标签： android热修复
2016-11-24 13:08 2562人阅读 评论(6) 收藏 举报
 分类： 实践（9）
版权声明：本文为博主原创文章，未经博主允许不得转载。
目录(?)[+]
*本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布

热修复技术自从QQ空间团队搞出来之后便渐渐趋于成熟。

我们这个系列主要介绍如何一步步手动实现基本的热修复功能，无需使用第三方框架。

在开始学习之前，需要对基本的热修复技术有些了解，以下文章可以帮助到你：

安卓App热补丁动态修复技术介绍
【腾讯Bugly干货分享】Android Patch 方案与持续交付
Android dex分包方案
dodola/HotFix
本节课程主要分为3块：

1.一步步手动实现热修复(一)-dex文件的生成与加载
2.一步步手动实现热修复(二)-类的加载机制简要介绍
3.一步步手动实现热修复(三)-Class文件的替换
本节示例所用到的任何资源都已开源，项目中包含工程中所用到代码、示例图片、说明文档。项目地址为：
https://code.csdn.net/u011064099/sahadevhotfix/tree/master

dex文件的生成与加载

我们在这部分主要做的流程有：

1.编写基本的Java文件并编译为.class文件。
2.将.class文件转为.dex文件。
3.将转好的dex文件放入创建好的Android工程内并在启动时将其写入本地。
4.加载解压后的.dex文件中的类，并调用其方法进行测试。
Note: 在阅读本节之前最好先了解一下类加载器的双亲委派原则、DexClassLoader的使用以及反射的知识点。
编写基本的Java文件并编译为.class文件

首先我们在一个工程目录下开始创建并编写我们的Java文件，你可能会选择各种IDE来做这件事，但我在这里劝你不要这么做，因为有坑在等你。等把基本流程搞清楚可以再选择更进阶的方法。这里我们可以选择文本编辑器比如EditPlus来对Java文件进行编辑。

新建一个Java文件，并命名为：ClassStudent.java，并在java文件内键入以下代码：

public class ClassStudent {
    private String name;

    public ClassStudent() {

    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName(){
        return this.name + ".Mr";
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Note: 这里要注意，不要对类添加包名，因为在后期对class文件处理时会遇到问题，具体问题会稍后说明。上面的getName方法在返回时对this.name属性添加了一段字符串，这里请注意，后面会用到。
在文件创建好之后，对Java文件进行编译：
这里写图片描述

将.class文件转为.dex文件

好，现在我们使用class文件生成对应的dex文件。生成dex文件所需要的工具为dx，dx工具位于sdk的build-tools文件夹内，如下图所示：
这里写图片描述

Tips: 为了方便使用，建议将dx的路径添加到环境变量中。如果对dx工具不熟悉的，可以在终端中输入dx –help以获取帮助。
dx工具的基本用法是：

dx --dex [--output=<file>] [<file>.class | <file>.{zip,jar,apk} | <directory>]
1
1
Tips: 刚开始自己摸索的时候，就没有仔细看命令，导致后面两个参数的顺序颠倒了，搞出了一些让人疑惑难解的问题，最后又不得不去找dx工具的源码调试，最后才发现自己的问题在哪。如果有对dx工具感兴趣的，可以对dx的包进行反编译或者获取dx的相关源代码进行了解。dx.lib文件位于dx.bat的下级目录lib文件夹中，可以使用JD-GUI工具对其进行查看或导出。如果需要获取源代码的，请使用以下命令进行克隆：

Git clone https://android.googlesource.com/platform/dalvik
我们使用以下命令生成dex文件：

dx --dex --output=user.dex ClassStudent.class
1
1
这里我为了防止出错，提前在当前目录下新建好了user.dex文件。上述命令依赖编译.class文件的JDK版本，如果使用的是JDK8编译的class会提示以下问题：

PARSE ERROR:
unsupported class file version 52.0
...while parsing ClassStudent.class
1 error; aborting
1
2
3
4
1
2
3
4
这里的52.0意味着class文件不被支持，需要使用JDK8以下的版本进行编译，但是dx所需的环境还是需要为JDK8的，这里我编译class文件使用的是JDK7,请注意。

上面我们提到了为什么先不要在ClassStudent中使用包名，因为在执行dx的时候会报以下异常，这是因为以下第二项条件没有通过，该代码位于com.Android.dx.cf.direct.DirectClassFile文件内：

    String thisClassName = thisClass.getClassType().getClassName();
    if(!(filePath.endsWith(".class") && filePath.startsWith(thisClassName) && (filePath.length()==(thisClassName.length()+6)))){
        throw new ParseException("class name (" + thisClassName + ") does not match path (" + filePath + ")");
    }
1
2
3
4
1
2
3
4
运行截图如下所示：
这里写图片描述

好了，到此为止我们的目录应该如下：
这里写图片描述

写入dex到本地磁盘

接下来将生成好的user.dex文件放入Android工程的res\raw文件夹下：
这里写图片描述

在系统启动时将其写入到磁盘，这里不再贴出具体的写入代码，项目的MainActivity中包含了此部分代码。

加载dex中的类并测试

在写入完毕之后使用DexClassLoader对其进行加载。DexClassLoader的构造方法需要4个参数，这里对这4个参数进行简要说明：

String dexPath:dex文件的绝对路径。在这里我将其放入了应用的cache文件夹下。
String optimizedDirectory:优化后的dex文件存放路径。DexClassLoader在构造完毕之后会对原有的dex文件优化并生成一个新的dex文件，在这里我选择的是…/cache/optimizedDirectory/目录。此外，API文档对该目录有严格的说明：Do not cache optimized classes on external storage.出于安全考虑，请不要将优化后的dex文件放入外部存储器中。
String libraryPath:dex文件所需要的库文件路径。这里没有依赖，使用空字符串代替。
ClassLoader parent:双亲委派原则中提到的父类加载器。这里我们使用默认的加载器，通过getClassLoader()方法获得。
在解释完毕DexClassLoader的构造参数之后，我们开始对刚刚的dex文件进行加载：

DexClassLoader dexClassLoader = new DexClassLoader(apkPath, file.getParent() + "/optimizedDirectory/", "", classLoader);
1
1
接来下开始load我们刚刚写入在dex文件中的ClassStudent类：

Class<?> aClass = dexClassLoader.loadClass("ClassStudent");
1
1
然后我们对其进行初始化，并调用相关的get/set方法对其进行验证，在这里我传给ClassStudent对象一个字符串，然后调用它的get方法获取在方法内合并后的字符串：

    Object instance = aClass.newInstance();
    Method method = aClass.getMethod("setName", String.class);
    method.invoke(instance, "Sahadev");

    Method getNameMethod = aClass.getMethod("getName");
    Object invoke = getNameMethod.invoke(instance););
1
2
3
4
5
6
1
2
3
4
5
6
最后我们实现的代码可能是这样的：

    /**
     * 加载指定路径的dex
     *
     * @param apkPath
     */
    private void loadClass(String apkPath) {
        ClassLoader classLoader = getClassLoader();

        File file = new File(apkPath);

        try {

            DexClassLoader dexClassLoader = new DexClassLoader(apkPath, file.getParent() + "/optimizedDirectory/", "", classLoader);
            Class<?> aClass = dexClassLoader.loadClass("ClassStudent");
            mLog.i(TAG, "ClassStudent = " + aClass);

            Object instance = aClass.newInstance();
            Method method = aClass.getMethod("setName", String.class);
            method.invoke(instance, "Sahadev");

            Method getNameMethod = aClass.getMethod("getName");
            Object invoke = getNameMethod.invoke(instance);

            mLog.i(TAG, "invoke result = " + invoke);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
最后附上我们的运行截图：
这里写图片描述

如果在实现过程中遇到问题的，请在下方留言。

顶
0
踩
0


上一篇Android官方开发文档Training系列课程中文版：Activity测试之创建功能性测试
下一篇一步步手动实现热修复(二)-类的加载机制简要介绍
我的同类文章
实践（9）
•如何修改TextView链接点击实现(包含链接生成与点击原理分析)2016-12-14阅读1942
•一步步手动实现热修复(二)-类的加载机制简要介绍2016-11-25阅读2199
•由Actvity启动模式之SingleInstance引起的坑的反思2016-02-19阅读422
•JAVA1.6实现动态编译加载运行2015-11-03阅读365
•Android如何给无法更改继承关系的Activity更换ActionBar(setContentView方法实战)2015-10-21阅读766
•一步步手动实现热修复(三)-Class文件的替换2016-11-27阅读2567
•ScrollView嵌套EditText联带滑动的解决办法2016-04-21阅读1323
•解决AndroidStudio添加ProjectLibary后在编译时遇到的各种问题之解决方式索引(finished with non-zero exit value and so on...)2015-12-15阅读27521
•设计模式之观察者模式在Listview中的应用2015-10-28阅读569


参考知识库
img
Android知识库
29080关注|2439收录
img
.NET知识库
2655关注|815收录
img
Git知识库
5299关注|609收录
img
Java SE知识库
19803关注|468收录
img
Java EE知识库
13394关注|1215收录
img
微信开发知识库
16048关注|620收录
img
Java 知识库
21633关注|1436收录
img
软件测试知识库
3150关注|310收录
猜你在找
Android开发精品课程【Java核心知识】Android无障碍测试环境搭建和使用技巧Android自动化测试第三季Android前沿技术—《EventBus》Java基础核心技术：枚举&注解(day14)
DexClassLoader自定义加载Assets目录下的dexjar文件DEX 文件和APK 加载Android中dex文件的加载与优化流程android的DEX文件和APK 加载android 动态加载jardex文件


关闭


查看评论
3楼 qq_22007419 6小时前发表 [回复]

代码地址打不开啊。
Re: Sahadev_ 6小时前发表 [回复]

回复qq_22007419：我这里没问题，你打开的是这个地址吗？https://code.csdn.net/u011064099/sahadevhotfix/tree/master
2楼 13期-李天贵 2016-11-30 23:23发表 [回复]

总结的很详细
1楼 苹果树上的女孩 2016-11-28 14:48发表 [回复]

请教个问题，dx的路径我添加到环境变量里了，为什么敲命令时一直提示 dx不是内部或外部命令。。。/(ㄒoㄒ)/~~
Re: 李ZQ 1小时前发表 [回复]

回复苹果树上的女孩：如果你是添加环境变量前打开的命令窗口,那么,等你添加完了环境变量后,你再重新打开一次命令窗口就好了.
Re: Sahadev_ 2016-11-28 19:07发表 [回复]

回复苹果树上的女孩：dx的相对路径应该添加到path变量中
您还没有登录,请[登录]或[注册]
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场
核心技术类目
全部主题 Hadoop AWS 移动游戏 Java Android iOS Swift 智能硬件 Docker OpenStack VPN Spark ERP IE10 Eclipse CRM JavaScript 数据库 Ubuntu NFC WAP jQuery BI HTML5 Spring Apache .NET API HTML SDK IIS Fedora XML LBS Unity Splashtop UML components Windows Mobile Rails QEMU KDE Cassandra CloudStack FTC coremail OPhone CouchBase 云计算 iOS6 Rackspace Web App SpringSide Maemo Compuware 大数据 aptech Perl Tornado Ruby Hibernate ThinkPHP HBase Pure Solr Angular Cloud Foundry Redis Scala Django Bootstrap
个人资料
 访问我的空间
Sahadev_

 4  1
访问：343908次
积分：4739
等级：
排名：第4769名
原创：57篇转载：5篇译文：115篇评论：121条
联系方式
sahadev@foxmail.com


我建了一个QQ群，欢迎对学习有兴趣的同学加入我们可以一起探讨、深究、掌握那些我们会用到的技术，让自己不至于太落伍。
相关地址
《Android官方开发文档Training系列课程中文版》源文件的项目地址：https://code.csdn.net/u011064099/android-training-chinese-version/tree/master
博客专栏
	热修复实现之路
文章：3篇
阅读：7500
	Android开发训练文档中文翻译
文章：117篇
阅读：244548
文章分类
源码分析(19)
提高工作效率(2)
奇妙控件(5)
其它(16)
数据加解密(6)
实践(10)
开发辅助工具(2)
设计模式(3)
Python(1)
网络通信(1)
翻译(118)
文章存档
2016年12月(2)
2016年11月(8)
2016年10月(6)
2016年09月(13)
2016年08月(15)
展开
阅读排行
Android官方开发文档Training系列课程中文版：创建自定义View之View的创建(40208)
解决AndroidStudio添加ProjectLibary后在编译时遇到的各种问题之解决方式索引(finished with non-zero exit value and so on...)(27602)
Android官方开发文档Training系列课程中文版：APP的内存管理(17624)
Android官方开发文档Training系列课程中文版：网络操作之XML解析(12175)
Android官方开发文档Training系列课程中文版：多样屏幕之支持不同的屏幕尺寸(9407)
Android官方开发文档Training系列课程中文版：高效显示位图之在非UI线程中处理图片(9079)
Android官方开发文档Training系列课程中文版：Android的JNI相关(8053)
Android官方开发文档Training系列课程中文版：高效显示位图之加载大位图(7078)
Android官方开发文档Training系列课程中文版：高效显示位图之管理位图内存(5673)
Android官方开发文档Training系列课程中文版：动画视图之创建自定义转场动画(5202)

公司简介|招贤纳士|广告服务|联系方式|版权声明|法律顾问|问题报告|合作伙伴|论坛反馈
网站客服杂志客服微博客服webmaster@csdn.net400-600-2320|北京创新乐知信息技术有限公司 版权所有|江苏知之为计算机有限公司|江苏乐知网络技术有限公司
京 ICP 证 09002463 号|Copyright © 1999-2016, CSDN.NET, All Rights Reserved GongshangLogo

